#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <100>;
            key-positions = <1 2>;
            bindings = <&kp TAB>;
        };

        combo_bt_clear {
            timeout-ms = <100>;
            key-positions = <6 7 8>;
            bindings = <&bt BT_CLR>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <20 21>;
        };

        steno {
            bindings = <&tog 3>;
            key-positions = <37 36 40 41>;
        };
    };

    behaviors {
        hml_repeat: hml_repeat {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&key_repeat>;

            hold-trigger-key-positions = <0>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;                // repeat on tap-into-hold
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <37 36 38 39 40 41 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;                // repeat on tap-into-hold
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N1>, <&kp EXCL>;
        };

        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N2>, <&kp AT>;
        };

        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N3>, <&kp HASH>;
        };

        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N4>, <&kp DLLR>;
        };

        td5: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_5";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N5>, <&kp PRCNT>;
        };

        td6: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_6";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N6>, <&kp CARET>;
        };

        td7: tap_dance_7 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_7";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N7>, <&kp AMPS>;
        };

        td8: tap_dance_8 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_8";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N8>, <&kp ASTRK>;
        };

        hmtpl: hmtpl {
            compatible = "zmk,behavior-hold-tap";
            label = "HMTPL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <36 37 38 39 40 41 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };

        hmtpr: hmtpr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMTPR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <36 37 38 39 40 41 0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 3>;
        };

        shifthmr: shifthmr {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFTHMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
            quick-tap-ms = <185>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <36 37 38 39 40 41 0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 3>;
        };

        shifthml: shifthml {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFTHML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
            quick-tap-ms = <185>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <36 37 38 39 40 41 36 37 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  TAB |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |  ALT |
            //                    | GUI | LWR | SPC |   | ENT | BKSP | RSE |

            bindings = <
&kp ESC    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U     &kp I      &kp O    &kp P          &kp TAB
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J     &kp K      &kp L    &kp SEMICOLON  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M     &kp COMMA  &kp DOT  &kp FSLH       &kp LALT
                         &kp LGUI  &mo 1  &kp SPACE    &kp RET  &kp BSPC  &mo 2
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |      |     |     |  <  |  >  |      |     |  [  |  7  |  8  |  9  |  ]  |   \  |
            // | CTRL |     |     |  `  |  _  |  +   |     |  (  |  4  |  5  |  6  |  )  |      |
            // | SHFT |     |     |  ~  |  =  |  -   |     |  {  |  1  |  2  |  3  |  }  | RALT |
            //                     | GUI |     | SPC |     | ENT | BKSP |  0  |

            bindings = <
&trans     &trans  &trans  &kp LT     &kp GT     &trans       &kp LBKT  &kp N7    &kp N8  &kp N9  &kp RBKT  &kp BACKSLASH
&kp LCTRL  &trans  &trans  &kp GRAVE  &kp UNDER  &kp PLUS     &kp LPAR  &kp N4    &kp N5  &kp N6  &kp RPAR  &trans
&kp LSHFT  &trans  &trans  &kp TILDE  &kp EQUAL  &kp MINUS    &kp LBRC  &kp N1    &kp N2  &kp N3  &kp RBRC  &kp LALT
                           &kp LGUI   &trans     &kp SPACE    &kp RET   &kp BSPC  &kp N0
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  F1   |  F2  |  F3  |  F4  |  F5  |  F6  |            |   F7  |  F8  |  F9  |  F10  |  F11  |  F12  |
            // |       | BT1  | BT2  | BT3  | BT4  | BT5  |            |  LFT  | DWN  |  UP  |  RGT  |       |       |
            // |       | Prev | Next | Vol - | Vol + | Play/Pause |    |       |      |      |       |       |       |
            //                       |      |      |      |            |       |      |      |

            bindings = <
&kp F1  &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7    &kp F8    &kp F9  &kp F10    &kp F11  &kp F12
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans   &trans
&trans  &kp C_PREV    &kp C_NEXT    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP        &trans    &trans    &trans  &trans     &trans   &trans
                                    &trans        &trans        &trans          &trans    &kp BSPC  &trans
            >;
        };

        steno {
            bindings = <
&none  &kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y    &kp U  &kp I  &kp O  &kp P          &kp LEFT_BRACKET
&none  &kp A  &kp S  &kp D  &kp F  &kp G        &kp H    &kp J  &kp K  &kp L  &kp SEMICOLON  &kp SQT
&none  &none  &none  &none  &none  &none        &none    &none  &none  &none  &none          &none
                     &kp C  &kp V  &kp SPACE    &kp RET  &kp N  &kp M
            >;
        };
    };
};
